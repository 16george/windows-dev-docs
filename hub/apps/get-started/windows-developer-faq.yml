### YamlMime:FAQ
metadata:
  description: The official Windows Developer FAQ. Get answers to common questions about Windows application development and Windows App SDK.
  title: Windows Developer FAQ
  ms.topic: faq
  ms.date: 02/04/2022
  keywords: windows, win32, desktop development, windows app sdk, appsdk, uwp, wpf
  ms.author: mikben
  author: mikben
  ms.localizationpriority: medium
  ms.collection: windows11
title: Windows Developer FAQ/Glossary
summary: 
  This article is meant to promote a common understanding of the Windows development experience, product direction, and key terminology.
sections: 

 - name: "Glossary" 
   questions: 
     - question: " "
       answer: |+
          - **Admin-managed apps**: Apps that administrators manage through administrative capabilities such as Intune.
          - **Admin-unmanaged apps:** Apps that users install and manage without admin control.
          - **App lifecycle management (ALM):** Describes the management of your application's execution state: not running, running in background, running in foreground, suspended, and so on. See [Windows 10 universal Windows platform (UWP) app lifecycle](https://docs.microsoft.com/windows/uwp/launch-resume/app-lifecycle).
          - **Application model:** Describes the framework components that support a specific application. For example, the Universal Windows Platform (UWP) app model includes UWP, WinUI 2, and XAML.
          - **Application packaging:** Describes the manner in which your application is packaged before being distributed and installed by users. Applications can be packaged, unpackaged, or sparsely packaged.
          - **[Dynamic Dependencies](https://github.com/microsoft/WindowsAppSDK/blob/main/specs/dynamicdependencies/DynamicDependencies.md):** Makes Framework packages accessible to all kinds of apps, packaged and unpackaged.
          - **[Fluent Design](https://www.microsoft.com/design/fluent/#/):** Gives you an open-source design system that lets you create reusable cross-platform user interfaces.
          - **Hot Reload:** A .NET and C++ feature that allows you to update your application's code and observe your changes while your application runs, eliminating the need to stop, rebuild, and re-rerun your apps while developing. See [Write and debug running code with Hot Reload](https://docs.microsoft.com/visualstudio/debugger/hot-reload).
          - **In-app updates:** Allow you to update your applications without requiring your users to take any installation or update action. Packaged apps support in-app updates.
          - **Managed apps:** "Managed" refers to the "managed runtime" of .NET, which provides managed services such as garbage collection and security assurances. If you're building an app with .NET, you're building a managed app.
          - **Microsoft Foundation Classes (MFC):** You can use Microsoft Foundation Classes (MFC) to create complex user interfaces with multiple controls. You can use MFC to create applications with Office-style user interfaces. See: [MFC desktop applications](https://docs.microsoft.com/cpp/mfc/mfc-desktop-applications).
          - **MSIX:** MSIX is a Windows app package format that combines the best features of MSI, .appx, App-V, and ClickOnce to provide a modern and reliable packaging experience. It's a modern application package format that lets you easily deploy your Windows applications. MSIX can be used to package apps built using Windows App SDK, Win32, WPF, or Windows Forms. When you use MSIX to deploy your apps, your app is a "packaged" app. MSIX-packaged apps can check for updates and can control when updates are applied. [What is MSIX?](https://docs.microsoft.com/windows/msix/overview).
          - **Native apps:** Traditionally, "native" refers to applications built without using the .NET runtime. In this case, "native" is synonymous with "unmanaged", and can be used to describe win32 apps that manage their own memory and security concerns. Some developers use "native" to indicate that an application has been built to run specifically on Windows, calling Windows APIs directly. We'll rarely use "native apps" in our docs because of this ambiguity.
          - **Native compilation:** Native compilation refers to applications compiled without using .NET.
          - **.NET MAUI:** .NET Multi-platform App UI. A cross-platform framework for creating native mobile and desktop apps with C# and XAML. An evolution of `Xamarin.Forms` extended from mobile to desktop scenarios, with UI controls rebuilt from the ground up for performance and extensibility. [What is .NET MAUI?](https://docs.microsoft.com/dotnet/maui/what-is-maui).
          - **Project Reunion:** The codename for the Windows App SDK. No longer in use.
          - **Packaged app:** Apps that are packaged using MSIX. Packaged apps give end-users an easy installation, uninstallation, and update experience. These run with package identity. Packaged apps can be installed through the Microsoft Store or Windows App Installer.
          - **React Native:** React Native for Windows + macOS brings React Native support for the Windows SDK as well as the macOS 10.14 SDK. [React Native for Windows and macOS](https://microsoft.github.io/react-native-windows/).
          - **Sparse package:** TODO
          - **Universal Windows Platform (UWP):** An application development platform that uses WinRT APIs to deliver packaged apps. UWP apps are generally locked down, they inherit the security of the UWP platform, and they run in a sandbox. The UWP platform is not being actively developed. WinUI 3 and the Windows App SDK are the latest and recommended alternatives for new app development. [Learn more about UWP](https://docs.microsoft.com/en-us/windows/uwp/).
          - **Unmanaged app:** Apps that aren't managed by the .NET runtime. If you're handling your own memory management, you're building an unmanaged app. "Unmanaged" is synonymous with "native".
          - **Unpackaged app:** Apps that don't use MSIX. They're typically installed and updated through `.exe`, Squirrel, or `.msi` files. These run without package identity. Both packaged and unpackaged apps can be published to the Microsoft Store.
          - **Visual Studio extension (VSIX):** Lets you create, package, and deploy Visual Studio extensions. [Get started with the VSIX Project template](https://docs.microsoft.com/visualstudio/extensibility/getting-started-with-the-vsix-project-template).
          - **Visual Studio:** An IDE that lets you create, edit, debug, build, and publish Windows apps. [Welcome to the Visual Studio IDE](https://docs.microsoft.com/visualstudio/get-started/visual-studio-ide).   
          - **WebView2:** Lets you include web content in your native Windows apps. You can use WebView2 with WinUI 3, WPF, and WinForms. [[ANNOUNCEMENT] UWP WebView2 on WinUI 2](https://github.com/MicrosoftEdge/WebView2Feedback/issues/1604).
          - **Win32:** The Win32 API is a platform for native C/C++ Windows applications that require direct access to Windows and hardware. It provides a first-class development experience without depending on a managed runtime environment like .NET and WinRT (for UWP apps for Windows 10). This makes the Win32 API the platform of choice for applications that need the highest level of performance and direct access to system hardware. [Get started with desktop Windows apps that use the Win32 API](https://docs.microsoft.com/windows/win32/desktop-programming).     
          - **Windows API:** Refers to the entire set of Windows APIs including Win32 APIs, COM APIs, UWP WinRT APIs, and the WinRT APIs that are part of WinAppSDK and WinUI 3.
          - **Windows app:** An application that can run on Windows. Windows apps can be built using a variety of technologies including the Windows App SDK, .NET Maui, Win32, and WPF. See the [overview of application development options](index.md) if you need help deciding which technology to use.     
          - **Windows App SDK:** A set of new developer components and tools that represent the next evolution in the Windows app development platform. The successor to UWP. It lifts libraries from the OS into a standalone SDK that you can use to build backwards-compatible desktop apps. See [Overview of app development options](https://docs.microsoft.com/en-us/windows/apps/get-started/?tabs=cpp-win32).
          - **Windows Forms:** Also known as WinForms. A thin layer over Windows APIs with minimal layout and styling options. Not being actively developed. WinUI 3 and Windows App SDK are the latest and recommended alternatives for new app development.     
          - **Windows SDK:** The Windows SDK is a collection of headers, libraries, metadata, and tools that allow you to build desktop and UWP Windows apps. Not to be confused with the Windows App SDK, which is a modern abstracton around Windows APIs that succeeds the Windows SDK.
          - **WinRT:** Also known as C++/WinRT. C++/WinRT is an entirely standard modern C++17 language projection for Windows Runtime (WinRT) APIs, implemented as a header-file-based library, and designed to provide you with first-class access to modern Windows APIs. [C++/WinRT](https://docs.microsoft.com/windows/uwp/cpp-and-winrt-apis/).
          - **WinUI:** The Windows UI Library (WinUI) is a native user interface (UX) framework for both Windows desktop and UWP applications. [Windows UI Library (WinUI)](https://docs.microsoft.com/windows/apps/winui/).   
          - **WinUI 2:** A convenient control library for UWP's UI stack. 
          - **WinUI 3:** The latest and recommended UI framework for Windows desktop apps. This framework is made available through the Windows App SDK, and has been decoupled from the Windows operating system. WinUI 3 uses Fluent Design to provide a native UX framework for windows desktop and UWP apps. It will feel very familiar if you've worked with UWP XAML. 
          - **Windows Presentation Foundation (WPF):** More advanced than WinForms, but not being actively developed. The Windows App SDK and WinUI 3 are the latest and recommended alternatives for new app development. 
          - **XAML Islands:** XAML Islands lets you host WinRT XAML controls in non-UWP desktop (Win32, WinForms, WPF) apps starting in Windows 10, version 1903. [Host WinRT XAML controls in desktop apps (XAML Islands)](https://docs.microsoft.com/windows/apps/desktop/modernize/xaml-islands). 
          - **Xamarin:** Xamarin is an open-source app platform that lets you build Android and iOS apps with .NET and C#. [Xamarin](https://dotnet.microsoft.com/apps/xamarin).
          --- 
 - name: "Getting started" 
   questions: 
     - question: What is the Windows App SDK?
       answer: |
          The Windows App SDK is a set of new developer components and tools that represent the next evolution in the Windows app development platform.
     - question: What's the difference between the Windows App SDK and the Windows SDK?
       answer: |
          Both are software development kits (SDKs) (containing documentation, header files, libraries, samples, and tools) that enable you to develop Windows apps. The Windows App SDK is newer, it's focused on desktop apps, it supports WinUI 3, and it allows you to call Windows APIs that are decoupled from the operating system (OS). By removing dependencies on particular OS versions, you're ultimately able to reach more users. The Windows SDK is older, is aimed at UWP apps as well as desktop apps, it supports WinUI 2, and it's designed around Windows APIs that are coupled to particular versions of the OS.
     - question: What's the latest and recommended way to build Windows Apps?
       answer: | 
          - **Windows:** Windows App SDK + WinUI 3 are the future of Windows app development. 
          - **Cross-platform:** .NET MAUI lets you build cross-platform apps that use WinUI 3 when running on Windows.
          - **React developers:** We're working on supporting WinUI 3 in React Native on Windows. 
          - **Web developers:** WebView2 gives your web applications a way to feel like Windows desktop apps while accessing the Windows platform and Windows App SDK.  

          [Learn more about choosing a development technology](./index.md).
     - question: Can I incrementally migrate my existing app to Windows App SDK and WinUI 3?
       answer: |
          Yes&mdash;you can gradually migrate your WinForms, Win32, WPF, and UWP apps to WinUI 3.
        # Low confidence - need product guidance
        # Provide migration guidance here
     - question: Do I need to use Visual Studio to build WinUI 3 apps?
       answer: |
           Yes. Other IDEs (such as Visual Studio Code) are currently unsupported.
     - question: What limitations are there when building with WinUI 3 and Windows App SDK?
       answer: |
           Current limitations include:
            - Multi-windowing isn't supported yet.  
            - Apps that haven't been published through the Microsoft Store can't send push notifications. 
            - Local toast notifications aren't supported yet.
            - XAML Islands aren't supported yet.
            - Media, map, and inking controls aren't supported yet.
            - ARM64 isn't yet supported for unpackaged scenarios. 
            - Mica (Win11) and Acrylic (Win10) backgrounds aren't supported yet.
            - App lifecycle management isn't supported yet.

           Refer to the official [Windows App SDK Roadmap](https://portal.productboard.com/winappsdk/1-windows-app-sdk/tabs/2-planned) for the latest product plans.
         # TODO: push notifications limitation needs confirmation
     - question: When I build an app using Windows App SDK and WinUI 3, am I building a "WinUI 3 app"?
       answer: |
          Yes&mdash;that's the term that we recommend you use.
     - question: Can I incrementally update my WinUI 2 app to WinUI 3 by gradually replacing WinUI 2 components with WinUI 3 components? In other words, can WinUI 2 and WinUI 3 components be mixed?
       answer: |
          No. WinUI 3 / Windows App SDK uses the `Microsoft.*` namespace. WinUI 2 / UWP uses the `Windows.*` namespace. These namespaces can't be mixed. 
     - question: How hard is it to migrate UWP apps to Windows App SDK and WinUI 3?
       answer: |
          In most cases your UI code needs just a few namespace changes. Much of your platform code can stay the same. You'll need to adjust some code due to differences between desktop apps and UWP apps. But we expect that for most apps (depending on codebase size, of course), migration will take on the order of days rather than weeks. See [About migrating from UWP to the Windows App SDK](https://docs.microsoft.com/windows/apps/get-started/migrate-from-uwp-to-winappsdk).
     - question: If I have an existing UWP app in the Store, can I publish a new packaged app using the same identifiers?
       answer: |
          Yes, upgraded apps can be published without having to update your application's identity. Users who have the old version will get updated to the new version.
     - question: Can I incrementally migrate my existing app to Windows App SDK and WinUI 3?
       answer: |
          Yes&mdash;you can gradually migrate your WinForms, Win32, WPF, and UWP apps to WinUI 3.
        # Low confidence - need product guidance
        # Provide migration guidance here
     - question: Can I use Windows App SDK features in my existing app without fully rewriting it?
       answer: |
          TODO - product guidance needed
     - question: Where can I find migration guidance?
       answer: |
          - UWP developers: See [About migrating from UWP to the Windows App SDK](https://docs.microsoft.com/en-us/windows/apps/get-started/migrate-from-uwp-to-winappsdk)
          - todo: what other migration guidance is available?

 - name: Selecting a Windows development technology
   questions: 
     - question: What's the best way to build a new Windows app?
       answer: |
          Windows App SDK is the latest and recommended way to build modern Windows applications. [Learn more about development options](./index.md).
     - question: Where can I find a straightforward comparison of Windows development technologies?
       answer: |
          See [Select a development technology](./index.md).
     - question: Can I use Blazor to build desktop apps?
       answer: |
          Yes, but the application will be a hybrid web/desktop app that combines web and native UI together within a native client application. 
        # See: https://github.com/dotnet/maui/issues/2536



 - name: Windows App SDK and WinUI 3
   questions: 
     - question: What does Windows App SDK mean for UWP developers?
       answer: |
          UWP developers don't need to migrate. WinUI 2 and the Windows SDK will continue to support UWP project types, including bug, reliability, and security fixes. If you want to update your UWP app to use the Windows App SDK or .NET 5, you can migrate your project to a desktop project type by following our migration guidance (see [Migrate from UWP to the Windows App SDK](https://docs.microsoft.com/windows/apps/windows-app-sdk/migrate-to-windows-app-sdk/migrate-to-windows-app-sdk-ovw)). 
     - question: What does Windows App SDK mean for other desktop developers?
       answer: |
          If you're working on a desktop project type (WPF, WinForms, Win32, or .NET 5+), you can add the Windows App SDK as a NuGet package and get access to all the new APIs.

          Over time, Windows App SDK will become the superset of the capabilities of both desktop and UWP.
     - question: How should I think about the future of app development on Windows?
       answer: |
          Windows App SDK decouples Windows development APIs from the operating system (OS) so that you can build Windows apps that don't depend on operating systems being updated. Successive Windows App SDK releases decouple more and more APIs in this way. By removing dependencies on particular OS versions, you're able to reach more users.

          It's best to think of Windows App SDK / WinUI 3 as an OS-decoupled superset of UWP / WinUI 2 that will eventually reach approximate feature parity. UWP will be supported by the Windows SDK in the meantime, with the caveat that .NET 5/6 won't be coming to UWP.
     - question: Can WinUI 3 be used with UWP?
       answer: |
          WinUI 3 is supported only in desktop-based projects. To use WinUI 3 in your UWP project, your UWP projects can migrate their project type to desktop (see [how to migrate your UWP app to the Windows App SDK](https://docs.microsoft.com/en-us/windows/apps/windows-app-sdk/migrate-to-windows-app-sdk/migrate-to-windows-app-sdk-ovw)).
     - question: Do you need to use XAML if you want to use WinUI 3?
       answer: |
          No. UI controls can be created in code. You can also use XAML if preferred, which means that you can reuse your XAML when migrating from UWP/WPF to WinUI 3.
     - question: Does Visual Studio have a design surface / GUI designer for WinUI 3?
       answer: |
          Yes, you can use Visual Studio to design WinUI 3 apps through a GUI interface?
        # Is this right?
     - question: Do I need to use WinForms or WPF when creating GUIs in WinUI 3 apps?
       answer: |
          No. WinUI 3 is a full-fledged UI framework. You can integrate WinUI 3 into your WinForms / WPF apps, but WinUI 3 doesn't have a dependency on WinForms or WPF.
        # todo: link to guidance
     - question: Does Windows App SDK include WinUI 3?
       answer: |
          Yes. 
     - question: Does Windows App SDK include WinUI 2?
       answer: |
          WinUI 2 and UWP are not included as part of Windows App SDK. WinUI 2 ships as a standalone NuGet package; WinUI 3 ships within Windows App SDK.
     - question: Can I do everything that I can do with WinUI 2 using WinUI 3?
       answer: |
          Not quite. WinUI 3 isn't an in-place upgrade of WinUI 2. WinUI 3 is a new technology that's meant to replace WinUI 2 as we work towards approximate feature parity between UWP / WinUI 2 and Windows App SDK / WinUI 3.
     - question: Can I use WinUI 3 without using Windows App SDK?
       answer: |
          No. Since WinUI 3 is part of the Windows App SDK, by using WinUI 3 you're actually using the Windows App SDK.
     - question: Can I use WinUI 3 in Win32 apps?
       answer: |
          Yes, but the WinUI 3 UI controls can't be mixed with Win32 UI controls.
        # low confidence
     - question: What's the difference between XAML Islands and WinUI 3?
       answer: |
          TODO - product guidance needed
     - question: Can XAML Islands be used with Windows App SDK?
       answer: |
          TODO - product guidance needed
     - question: If I use WinUI 3, will my app look modern on both Windows 11 and Windows 10? And does the answer depend on whether my app is packaged or unpackaged?
       answer: |
          Yes, your app's UI will inherit the latest Fluent UI design principles on both Windows 11 and Windows 10 down to version 1809 in both packaged and unpackaged scenarios.
     - question: Can I use WinUI 3 with React Native?
       answer: |
          TODO - product guidance needed
     - question: Can I use Mica (Windows 11) or Acrylic (Windows 10) backgrounds in apps built with Windows App SDK?
       answer: |
          Not yet. This is currently in scope for Windows App SDK v1.1.
     - question: Does WinUI 3 use XAML markup, like UWP and Windows Presentation Foundation (WPF)?
       answer: |
          Yes, there are many benefits (including designability) to representing your WinUI 3 UI in the form of declarative XAML markup. But (like with UWP and WPF) you can also use WinUI 3 types using imperative code (C#) where doing so is necessary.

 - name: UWP and WinUI 2
   questions: 
     - question: Can UWP apps be distributed outside of the Microsoft Store?
       answer: |
          Yes, as long as they're signed with a valid certificate. We recommend developing new apps with Windows App SDK and WinUI 3.
     - question: Can I mix UWP UI controls with Win32 UI controls?
       answer: |
          Yes - XAML Islands lets you do this. [Learn more about XAML Islands](https://docs.microsoft.com/windows/apps/desktop/modernize/xaml-islands).


 - name: XAML Islands
   questions: 
     - question: What's XAML Islands?
       answer: |
          XAML Islands lets you use new pieces of UI from the Universal Windows Platform (UWP) on existing Win32 apps, including Windows Forms and WPF apps. You can use XAML Islands to [host WinRT XAML controls in non-UWP desktop apps](https://docs.microsoft.com/windows/apps/desktop/modernize/xaml-islands). [Learn more about XAML Islands](https://docs.microsoft.com/windows/apps/desktop/modernize/xaml-islands).
     
     
 - name: Combining Windows development technologies
   questions:      
     - question: Can I start with WinUI 3 and App SDK, and later integrate .NET MAUI if I eventually want to target cross-platform scenarios?
       answer: |
          TODO - product guidance needed
     - question: Can I combine WPF and WinUI 3? What are the reasons to do that?
       answer: |
          Yes, you can integrate WinUI 3 into your WPF app. This can be useful in situations where you need browser controls from your WPF app.
 


 - name: Cross-platform development
   questions: 
     - question: What should I use if I want to build apps that work on Windows and Xbox?
       answer: |
          If your app needs to support both Windows and Xbox, we recommend using the Universal Windows Platform (UWP). We usually recommend using Windows App SDK and WinUI 3 for Windows apps, although these apps won't work on Xbox. And for game development, we recommend using [Microsoft Game Development Kit](https://github.com/microsoft/GDK).
        # TODO: Are there future plans to allow devs to build xbox apps using win app sdk?
        # see: https://github.com/microsoft/WindowsAppSDK/discussions/1615#discussioncomment-1510738 -->
     - question: What should I use if I want to build apps that work on Windows and Surface Hub?
       answer: |
          If you're targeting both Windows and Surface hub, we recommend using UWP.
     - question: What should I use if I want to build apps that work on Windows and Hololens and/or Mixed Reality?
       answer: |
          It's not currently possible to build one app that works on Windows, Hololens, and Mixed Reality. We recommend using Windows App SDK and WinUI 3 to build Windows apps. For Hololens apps, we recommend using either UWP or OpenXR + Win32. [Learn more about OpenXR](https://docs.microsoft.com/windows/mixed-reality/develop/native/openxr). Mixed Reality apps can be built [using the Windows SDK and Visual Studio](https://docs.microsoft.com/windows/mixed-reality/develop/install-the-tools).



 - name: Samples and real-world apps
   questions: 
     - question: Where can I find an example of a small and easy-to-deploy WinUI 3 app?
       answer: |
          TODO - product guidance needed
     - question: How was MS Paint in Windows 11 built?
       answer: |
          MS Paint on Windows 11 uses XAML islands to render UWP components within a ______ shell.




 - name: Packaging, deployment, and updates
   questions: 
     - question: What's the difference between packaged, unpackaged, and sparse-packaged apps?
       answer: |
          Packaged apps use MSIX to give users an easy installation, uninstallation, and update experience. Unpackaged apps don't use MSIX. Both types of applications can be published to the Microsoft Store.
        # Note that definitions exist both here and in the glossary - update both places if updating one for consistency.
        # todo: define sparsed
     - question: Can I create an unpackaged WinUI 3 app?
       answer: |
          Yes. WinUI 3 apps without MSIX packaging can be deployed on Windows versions 1809 and above. See [Create a WinUI 3 app](https://docs.microsoft.com/windows/apps/winui/winui3/create-your-first-winui3-app).
     - question: Can I configure my WinUI 3 app to auto-update?
       answer: |
          Yes. TODO: Link to guidance
        # ask product peers to confirm&mdash;see https://github.com/microsoft/WindowsAppSDK/discussions/1615#discussioncomment-1500094 
     - question: Can I use Windows App SDK without using MSBuild?
       answer: |
          TODO - product guidance needed
        # see: https://github.com/microsoft/WindowsAppSDK/discussions/1615#discussioncomment-1499451 -->



 - name: Security
   questions:
     - question: Where can I learn more about security best practices when developing apps for Windows?
       answer: |
          TODO
     - question: Can I use encrypted binaries with WinUI 3 apps? This will help me migrate my UWP app to WinUI 3.
       answer: |
          TODO




 - name: Performance and optimization
   questions:
     - question: Does Windows App SDK support native compilation?
       answer: |
          TODO - product guidance needed
     - question: How do I make sure my apps run smoothly on all targeted devices and platforms?
       answer: |
          TODO - link to docs
     - question: My built WinUI 3 app is large. How do I reduce the size of my built binary?
       answer: |
          TODO - product guidance needed
     - question: What can I do to make my Windows app feel great to end-users?
       answer: |
          See [Make apps great for Windows](https://docs.microsoft.com/windows/apps/get-started/make-apps-great-for-windows).



 - name: Compatibility
   questions:
     - question: Will my users ever have to update Windows to use my WinUI 3 app?
       answer: |
          Users who have Windows 10, version 1809 and beyond will be able to install your WinUI 3 apps without updating their OS as long as your project is configured to target Windows 10 version 1809.
     - question: Can I target ARM64 with my WinUI 3 app?
       answer: |
          ARM64 is supported for packaged WinUI 3 apps. Targeting ARM64 with unpackaged WinUI 3 apps is currently unsupported.

 - name: Deprecations and migrations
   questions:
     - question: Are UWP / WinUI 2 deprecated?
       answer: |
          No. UWP and WinUI 2 are still fully supported for production scenarios and the Windows SDK will continue to support UWP project types, including bug, reliability, and security fixes. 

          UWP's functionality is being incrementally ported into Windows App SDK. There will eventually be approximate parity between UWP and Windows App SDK, but we aren't planning to deprecate UWP any time soon.
        # <!--see MSFT representing UWP status here: https://www.reddit.com/r/csharp/comments/r9ecz4/what_is_the_main_framework_used_for_making/  -->
     - question: When should I migrate a UWP + WinUI 2 app to WinUI 3?
       # "What are the reasons to -> when should I" based on an assumption that people are more likely to search for "when should I" vs "what are the reasons"
       answer: |
          We encourage you to migrate your UWP project to a WinUI 3 desktop project if you need to use .NET 5/6 because .NET 5/6 won't be coming to UWP project types.
          Otherwise, there's no need to migrate your UWP app to WinUI 3. We're working towards approximate feature parity between UWP and Windows App SDK (which includes WinUI 3), but you can use UWP if Windows App SDK doesn't yet meet your needs.
        # <!-- https://github.com/microsoft/WindowsAppSDK/discussions/1615 -->
     - question: When should I *not* to migrate a UWP + WinUI 2 app to WinUI 3?
       answer: |
          We recommend continuing to use UWP if:
           - You're building an app for Xbox
           - You're building an app for Hololens
           - You're building an app for Surface Hub 
           - You're building an app that targets Windows 10 version TODO
           - You need application lifecycle management 
           - UI performance is a priority 
        # <!-- see: https://github.com/microsoft/WindowsAppSDK/discussions/1615#discussioncomment-1500116  -->
        # leaning towards cutting the last bullet...
     - question: Is WPF deprecated?
       answer: |
          WPF is in maintenance mode, but is still supported for production scenarios.
     - question: When should I migrate a WPF app to WinUI 3? Is guidance available?
       answer: |
          TODO
     - question: Is WinForms deprecated?
       answer: |
          WinForms is in maintenance mode, but is still supported for production scenarios.
     - question: When should I migrate a WinForms app to WinUI 3? Is guidance available?
       answer: |
          TODO
     - question: Is the Windows Runtime (WinRT) deprecated?
       answer: |
          WinRT refers to a type of API. WinRT APIs are the evolution of COM APIs, and they're alive and kicking. WinAppSDK and WinUI 3 APIs are WinRT APIs.
     - question: When should I migrate a WinRT app to WinUI 3? Is guidance available?
       answer: |
          TODO

 - name: Release notes, future plans, and roadmaps
   questions:
     - question: Will WinUI 3 and Windows App SDK be open-sourced?
       answer: |
          The team is currently focused on delivering stable features, but open source *is* on our internal roadmap. We'll keep the developer community updated through our community calls.
        # See: https://www.reddit.com/r/Windows11/comments/qw7o69/comment/hl675ea/?utm_source=share&utm_medium=web2x&context=3 
     - question: Where can I find release notes for Windows App SDK?
       answer: |
          See [Stable channel release notes](https://docs.microsoft.com/windows/apps/windows-app-sdk/stable-channel), [Preview channel release notes](https://docs.microsoft.com/windows/apps/windows-app-sdk/preview-channel), and [Experimental channel release notes](https://docs.microsoft.com/windows/apps/windows-app-sdk/experimental-channel).
     - question: Where can I find a public roadmap for Windows App SDK?
       answer: |
           - [Windows App SDK roadmap](https://portal.productboard.com/winappsdk/1-windows-app-sdk/tabs/2-planned)
           - [WinUI 3 roadmap](https://github.com/microsoft/microsoft-ui-xaml/blob/main/docs/roadmap.md#winui-3)
     - question: Where can I find a roadmap for React Native Windows + Windows App SDK integration?
       answer: |
          See [the roadmap on Github](https://github.com/microsoft/react-native-windows/discussions/8906).



additionalContent: |
  ## Related
  - [Build your first Windows App](https://docs.microsoft.com/windows/apps/get-started/?tabs=cpp-win32#app-types)





