### YamlMime:FAQ
metadata:
  description: The official Windows Developer FAQ. Get answers to common questions about Windows application development and Windows App SDK.
  title: Windows Developer FAQ
  ms.topic: faq
  ms.date: 02/04/2022
  ms.author: mikben
  author: mikben
  ms.localizationpriority: medium
  ms.collection: windows11
title: Windows Developer FAQ/Glossary
summary: 
  This article is meant to promote a common understanding of the Windows development experience and product direction. The answers to these questiosn apply to Windows App SDK version 1.0.
sections: 

 - name: "Getting started" 
   questions: 
     - question: What is the Windows App SDK?
       answer: |
          The Windows App SDK is a Windows application development platform that allows you to build WinUI 3 desktop applications.
        # sign off
     - question: What's the difference between the Windows App SDK and the Windows SDK?
       answer: |
          Both are software development kits (SDKs) that let you build Windows apps. The **Windows App SDK** is newer, it's focused on desktop apps, it ships with WinUI 3, and it allows you to call Windows APIs that are decoupled from the operating system (OS). By removing dependencies on particular OS versions, you're ultimately able to reach more users. The **Windows SDK** is older, is aimed at UWP apps as well as desktop apps, it supports WinUI 2, and it's designed around Windows APIs that are coupled to particular versions of the OS.
        # sign off
     - question: What should I use to build Windows apps?
       answer: | 
          - **If you're targeting Windows:** Windows App SDK + WinUI 3 would be a great choice. This combination of technologies succeeds UWP + WinUI 2.
          - **If you're targeting cross-platform:** .NET MAUI lets you build cross-platform apps that use WinUI 3 when running on Windows.
          - **If you're a React developer:** We're working on supporting WinUI 3 in React Native on Windows. 
          - **If you're a web developer:** WebView2 gives your web applications a way to feel like Windows desktop apps while accessing the Windows platform and Windows App SDK.  
          - **If you're a C++ developer:** Windows App SDK + WinUI 3.

          [Learn more about choosing a development technology](./index.md).
        # pending product signoff
        # should we remove video?
        # blazor?
     - question: Can I use Windows App SDK and WinUI 3 in my existing Windows app?
       answer: |
          Generally speaking, no. 
          
          - **WPF/MFC/WinForms**: You can use Windows App SDK APIs that are not related to WinUI 3 in your existing WPF/MFC/WinForms apps. Examples of such APIs include App Lifecycle, Windowing, and Toast Notifications. 
          - **UWP/WinUI 2**: WinUI 3 and Windows App SDK use the win32 app model, which is incompatible with UWP/WinUI 2. You can't use WinUI 3 controls in UWP/WinUI 2 apps.
           
          Note that APIs within the `Microsoft.UI.XAML`` namespace are not compatible with WPF, Winforms, MFC, or UWP.
        # sign off - get another signoff
     - question: Do I need to use Visual Studio to build WinUI 3 apps?
       answer: |
           Yes. Other IDEs (such as Visual Studio Code) are currently unsupported. We strongly recommend using Visual Studio 2022 versions 17.1 and above to build WinUI 3 apps. Using the latest version of Visual Studio will give you access to rich development features like Hot Reload.
         # sign off
     - question: What limitations are there when building with WinUI 3 and Windows App SDK?
       answer: |
           Current limitations include:
            - Multi-windowing (multi threads) isn't supported yet. You can't create multiple XAML windows in separate UI threads. However multiple windows can be created in the same UI thread. 
            - Apps that haven't been published through the Microsoft Store can't send push notifications. (not sure - ask adam braden)
            - Local toast notifications aren't supported yet.
            - XAML Islands aren't supported yet.
            - Media, map, and inking controls aren't supported yet.
            - Mica (Win11) and Acrylic (Win10) backgrounds aren't supported yet.
            - App lifecycle management isn't supported yet. (follow up with andrew whitechapel - working for unpackaged, not packaged, or go ask adam braden)
         # everything signed off except follow ups
     - question: When I build an app using Windows App SDK and WinUI 3, am I building a "WinUI 3 app"?
       answer: |
          Yes - that's the term that we recommend you use. We generally refer to Windows app types in terms of the UI frameork used. Though keep in mind - a WPF app could *use* .NET and Windows App SDK.
         # signed off
     - question: Can I incrementally update my WinUI 2 app to WinUI 3 by gradually replacing WinUI 2 components with WinUI 3 components?
       answer: |
          No. You can't mix WinUI 2 and WinUI 3. See [About migrating from UWP to the Windows App SDK](https://docs.microsoft.com/windows/apps/get-started/migrate-from-uwp-to-winappsdk).
         # signed off
         # Link to migration guidelines
     - question: How hard is it to migrate UWP apps to Windows App SDK and WinUI 3?
       answer: |
          Windows App SDK / WinUI 3 introduce a large number of significant changes. Migrating UI components will generally be straightforward. Other components will require a high level of effort. See [About migrating from UWP to the Windows App SDK](https://docs.microsoft.com/windows/apps/get-started/migrate-from-uwp-to-winappsdk).
         # need to offer guidance about when to migrate vs when to rewrite.
         # needs revision + revisit
     - question: If I have an existing UWP app in the Store, can I publish a new packaged WinUI 3 app using the same identifiers?
       answer: |
          Yes, upgraded apps can be published without having to update your application's identity. Users who have the old version will get updated to the new version. (follow up with someone from the store - adam braden, mike battista)
         # signed off but needs confirmation       
     - question: Where can I find migration guidance?
       answer: |
          - **UWP developers**: See [About migrating from UWP to the Windows App SDK](https://docs.microsoft.com/en-us/windows/apps/get-started/migrate-from-uwp-to-winappsdk).
         # signed off.
     - question: Where can I find a straightforward comparison of Windows development technologies?
       answer: |
          See [Select a development technology](./index.md).
         # signed off 
 - name: Windows App SDK and WinUI 3
   questions: 
     - question: What does Windows App SDK mean for UWP developers?
       answer: |
          UWP developers don't need to migrate yet. WinUI 2 and the Windows SDK will continue to support UWP project types, including bug, reliability, and security fixes. If you want to update your UWP app to use the Windows App SDK or .NET 5, you can migrate your project to a desktop project type by following our migration guidance (see [Migrate from UWP to the Windows App SDK](https://docs.microsoft.com/windows/apps/windows-app-sdk/migrate-to-windows-app-sdk/migrate-to-windows-app-sdk-ovw)). 
         # signed off - could ask the MVPs - what is the honest answer you want to see here? Is this clear / confidence inspirin. 
     - question: What does Windows App SDK mean for other desktop developers?
       answer: |
          If you're working on a desktop project type (WPF, WinForms, Win32, or .NET 5+), you can add the Windows App SDK as a NuGet package and get access to all the new APIs.

          Over time, Windows App SDK will become the superset of the capabilities of both desktop and UWP.
         # pending product signoff
     - question: How should I think about the future of app development on Windows?
       answer: |
          Windows App SDK decouples Windows development APIs from the operating system (OS) so that you can build Windows apps that don't depend on operating systems being updated. Successive Windows App SDK releases decouple more and more APIs in this way. By removing dependencies on particular OS versions, you're able to reach more users.

          It's best to think of Windows App SDK / WinUI 3 as an OS-decoupled superset of UWP / WinUI 2. UWP will be supported while UWP features are being ported to the Windows App SDK with the caveat that .NET 5/6 won't be coming to UWP.
         # pending product signoff
     - question: Can WinUI 3 be used with UWP?
       answer: |
          WinUI 3 is supported only in desktop-based projects. To use WinUI 3 in your UWP project, your UWP projects can migrate their project type to desktop (see [how to migrate your UWP app to the Windows App SDK](https://docs.microsoft.com/en-us/windows/apps/windows-app-sdk/migrate-to-windows-app-sdk/migrate-to-windows-app-sdk-ovw)).
         # pending product signoff
     - question: Do you need to use XAML if you want to use WinUI 3?
       answer: |
          No. UI controls can be created in code. You can also use XAML if preferred, which means that you can reuse your XAML when migrating from UWP/WPF to WinUI 3.
         # pending product signoff
     - question: Does Visual Studio have a design surface / GUI designer for WinUI 3?
       answer: |
          Yes, you can use Visual Studio to design WinUI 3 apps through a GUI interface?
        # Is this right?
         # pending product signoff
     - question: Do I need to use WinForms or WPF when creating GUIs in WinUI 3 apps?
       answer: |
          No. WinUI 3 is a full-fledged UI framework. You can integrate WinUI 3 into your WinForms / WPF apps, but WinUI 3 doesn't have a dependency on WinForms or WPF.
        # todo: link to guidance
         # pending product signoff
     - question: Does Windows App SDK include WinUI 3?
       answer: |
          Yes. 
         # pending product signoff
     - question: Does Windows App SDK include WinUI 2?
       answer: |
          WinUI 2 and UWP are not included as part of Windows App SDK. WinUI 2 ships as a standalone NuGet package; WinUI 3 ships within Windows App SDK.
         # pending product signoff
     - question: Can I do everything that I can do with WinUI 2 using WinUI 3?
       answer: |
          Not quite. WinUI 3 isn't an in-place upgrade of WinUI 2. WinUI 3 is a new technology that replaces WinUI 2. Many UWP features are being ported to the Windows App SDK on a prioritized basis. Eventually, the WinApp SDK will support most UWP functionality, along with various new and improved features.
         # pending product signoff
     - question: Can I use WinUI 3 without using Windows App SDK?
       answer: |
          No. Since WinUI 3 is part of the Windows App SDK, by using WinUI 3 you're actually using the Windows App SDK.
        # pending product signoff
     - question: Can I use WinUI 3 in Win32 apps?
       answer: |
          Yes, but the WinUI 3 UI controls can't be mixed with Win32 UI controls.
        # low confidence
         # pending product signoff
     - question: What's the difference between XAML Islands and WinUI 3?
       answer: |
          TODO - product guidance needed
         # pending product signoff
     - question: Can XAML Islands be used with Windows App SDK?
       answer: |
          TODO - product guidance needed
         # pending product signoff
     - question: If I use WinUI 3, will my app look modern on both Windows 11 and Windows 10?
       answer: |
          Yes, your app's UI will inherit the latest Fluent UI design principles on both Windows 11 and Windows 10 down to version 1809 in both packaged and unpackaged scenarios.
         # pending product signoff
     - question: Can I use WinUI 3 with React Native?
       answer: |
          TODO - product guidance needed
         # pending product signoff
     - question: Can I use Mica (Windows 11) or Acrylic (Windows 10) backgrounds in apps built with Windows App SDK?
       answer: |
          Not yet.
         # pending product signoff
     - question: Does WinUI 3 use XAML markup, like UWP and Windows Presentation Foundation (WPF)?
       answer: |
          Yes, there are many benefits (including designability) to representing your WinUI 3 UI in the form of declarative XAML markup. But you can also use WinUI 3 types using imperative code (C#) where doing so is necessary, just like you can with UWP and WPF.
        # pending product signoff
 - name: UWP and WinUI 2
   questions: 
     - question: Can UWP apps be distributed outside of the Microsoft Store?
       answer: |
          Yes, as long as they're signed with a valid certificate. We recommend developing new apps with Windows App SDK and WinUI 3.
         # pending product signoff
     - question: Can I mix UWP UI controls with Win32 UI controls?
       answer: |
          Yes - XAML Islands lets you do this. [Learn more about XAML Islands](https://docs.microsoft.com/windows/apps/desktop/modernize/xaml-islands).
         # pending product signoff

 - name: XAML Islands
   questions: 
     - question: What's XAML Islands?
       answer: |
          XAML Islands lets you use new pieces of UI from the Universal Windows Platform (UWP) on existing Win32 apps, including Windows Forms and WPF apps. You can use XAML Islands to [host WinRT XAML controls in non-UWP desktop apps](https://docs.microsoft.com/windows/apps/desktop/modernize/xaml-islands). [Learn more about XAML Islands](https://docs.microsoft.com/windows/apps/desktop/modernize/xaml-islands).
        # pending product signoff   
     
 - name: Combining Windows development technologies
   questions:      
     - question: Can I start with WinUI 3 and App SDK, and later integrate .NET MAUI if I eventually want to target cross-platform scenarios?
       answer: |
          TODO - product guidance needed
         # pending product signoff
     - question: Can I combine WPF and WinUI 3? What are the reasons to do that?
       answer: |
          Yes, you can integrate WinUI 3 into your WPF app. This can be useful in situations where you need browser controls from your WPF app.
        # pending product signoff


 - name: Cross-platform development
   questions: 
     - question: What should I use if I want to build apps that work on Windows and Xbox?
       answer: |
          If your app needs to support both Windows and Xbox, we recommend using the Universal Windows Platform (UWP). We usually recommend using Windows App SDK and WinUI 3 for Windows apps, although these apps won't work on Xbox. And for game development, we recommend using [Microsoft Game Development Kit](https://github.com/microsoft/GDK).
        # TODO: Are there future plans to allow devs to build xbox apps using win app sdk?
        # see: https://github.com/microsoft/WindowsAppSDK/discussions/1615#discussioncomment-1510738 -->
       # pending product signoff
     - question: What should I use if I want to build apps that work on Windows and Surface Hub?
       answer: |
          If you're targeting both Windows and Surface hub, we recommend using UWP.
         # pending product signoff
     - question: What should I use if I want to build apps that work on Windows and Hololens and/or Mixed Reality?
       answer: |
          It's not currently possible to build one app that works on Windows, Hololens, and Mixed Reality. We recommend using Windows App SDK and WinUI 3 to build Windows apps. For Hololens apps, we recommend using either UWP or OpenXR + Win32. [Learn more about OpenXR](https://docs.microsoft.com/windows/mixed-reality/develop/native/openxr). Mixed Reality apps can be built [using the Windows SDK and Visual Studio](https://docs.microsoft.com/windows/mixed-reality/develop/install-the-tools).
         # pending product signoff
         # todo: consider splitting up if we think it's worth it


 - name: Samples and real-world apps
   questions: 
     - question: Where can I find an example of a small and easy-to-deploy WinUI 3 app?
       answer: |
          TODO - product guidance needed
         # pending product signoff
     - question: How was MS Paint in Windows 11 built?
       answer: |
          MS Paint on Windows 11 uses XAML islands to render UWP components within a ______ shell.
         # pending product signoff



 - name: Packaging, deployment, and updates
   questions: 
     - question: What's the difference between packaged, unpackaged, and sparse-packaged apps?
       answer: |
          Packaged apps use MSIX to give users an easy installation, uninstallation, and update experience. Unpackaged apps don't use MSIX. Both types of applications can be published to the Microsoft Store.
        # Note that definitions exist both here and in the glossary - update both places if updating one for consistency.
        # todo: include sparsed
        # todo: RE duplication between here and glossary: my current energy is a comparison isn't the same as a definition, so this isn't quite duplication. We could enumerate definitions here as includes - in my mind this is an optimization we can address later
        # pending product signoff
     - question: Can I create an unpackaged WinUI 3 app?
       answer: |
          Yes. WinUI 3 apps without MSIX packaging can be deployed on Windows versions 1809 and above. See [Create a WinUI 3 app](https://docs.microsoft.com/windows/apps/winui/winui3/create-your-first-winui3-app).
         # pending product signoff
     - question: Can I configure my WinUI 3 app to auto-update?
       answer: |
          Yes. TODO: Link to guidance
        # ask product peers to confirm&mdash;see https://github.com/microsoft/WindowsAppSDK/discussions/1615#discussioncomment-1500094 
         # pending product signoff
     - question: Can I use Windows App SDK without using MSBuild?
       answer: |
          TODO - product guidance needed
        # see: https://github.com/microsoft/WindowsAppSDK/discussions/1615#discussioncomment-1499451 -->
         # pending product signoff


 - name: Security
   questions:
     - question: Where can I learn more about security best practices when developing apps for Windows?
       answer: |
          TODO
         # pending product signoff
     - question: Can I use encrypted binaries with WinUI 3 apps? This will help me migrate my UWP app to WinUI 3.
       answer: |
          TODO
         # pending product signoff



 - name: Performance and optimization
   questions:
     - question: Does Windows App SDK support native compilation?
       answer: |
          TODO - product guidance needed
        # pending product signoff
     - question: How do I make sure my apps run smoothly on all targeted devices and platforms?
       answer: |
          TODO - link to docs
         # pending product signoff
     - question: My built WinUI 3 app is large. How do I reduce the size of my built binary?
       answer: |
          TODO - product guidance needed
        # pending product signoff
     - question: What can I do to make my Windows app feel great to end-users?
       answer: |
          See [Make apps great for Windows](https://docs.microsoft.com/windows/apps/get-started/make-apps-great-for-windows).
         # pending product signoff


 - name: Compatibility
   questions:
     - question: Will my users ever have to update Windows to use my WinUI 3 app?
       answer: |
          Users who have Windows 10, version 1809 and beyond will be able to install your WinUI 3 apps without updating their OS as long as your project is configured to target Windows 10 version 1809.
         # pending product signoff
     - question: Can I target ARM64 with my WinUI 3 app?
       answer: |
          ARM64 is supported for packaged WinUI 3 apps. Targeting ARM64 with unpackaged WinUI 3 apps is currently unsupported.
         # pending product signoff


 - name: Deprecations and migrations
   questions:
     - question: Are UWP / WinUI 2 deprecated?
       answer: |
          No. UWP and WinUI 2 are still fully supported for production scenarios and the Windows SDK will continue to support UWP project types, including bug, reliability, and security fixes. 

          UWP's functionality is being incrementally ported into Windows App SDK. Many UWP features are being ported to the Windows App SDK on a prioritized basis. Eventually, the WinApp SDK will support most UWP functionality, along with various new and improved features.
        # <!--see MSFT representing UWP status here: https://www.reddit.com/r/csharp/comments/r9ecz4/what_is_the_main_framework_used_for_making/  -->
         # pending product signoff
     - question: When should I migrate a UWP + WinUI 2 app to WinUI 3?
       # "What are the reasons to -> when should I" based on an assumption that people are more likely to search for "when should I" vs "what are the reasons"
       answer: |
          We encourage you to migrate your UWP project to a WinUI 3 desktop project if you need to use .NET 5/6 because .NET 5/6 won't be coming to UWP project types.
          Otherwise, there's no need to migrate your UWP app to WinUI 3. We're working on porting the most popular UWP features to Windows App SDK (which includes WinUI 3), but you can use UWP if Windows App SDK doesn't yet meet your needs.
        # <!-- https://github.com/microsoft/WindowsAppSDK/discussions/1615 -->
         # pending product signoff
     - question: When should I *not* to migrate a UWP + WinUI 2 app to WinUI 3?
       answer: |
          We recommend continuing to use UWP if:
           - You're building an app for Xbox
           - You're building an app for Hololens
           - You're building an app for Surface Hub 
           - You're building an app that targets Windows 10 version TODO
           - You need application lifecycle management 
        # <!-- see: https://github.com/microsoft/WindowsAppSDK/discussions/1615#discussioncomment-1500116  -->
        # leaning towards cutting the last bullet...
         # pending product signoff
     - question: Is WPF deprecated?
       answer: |
          WPF is in maintenance mode, but is still supported for production scenarios.
         # pending product signoff
     - question: When should I migrate a WPF app to WinUI 3? Is guidance available?
       answer: |
          TODO
         # pending product signoff
     - question: Is WinForms deprecated?
       answer: |
          WinForms is in maintenance mode, but is still supported for production scenarios.
         # pending product signoff
     - question: When should I migrate a WinForms app to WinUI 3? Is guidance available?
       answer: |
          TODO
         # pending product signoff
     - question: Is the Windows Runtime (WinRT) deprecated?
       answer: |
          WinRT refers to a type of API. WinRT APIs are the evolution of COM APIs, and they're alive and kicking. WinAppSDK and WinUI 3 APIs are WinRT APIs.
         # pending product signoff

 - name: Release notes, future plans, and roadmaps
   questions:
     - question: Will WinUI 3 and Windows App SDK be open-sourced?
       answer: |
          TODO - do we want to communicate this in the FAQ? If so - 
          The team is currently focused on delivering stable features, but open source *is* on our roadmap. We'll keep the developer community updated through our community calls.
        # See: https://www.reddit.com/r/Windows11/comments/qw7o69/comment/hl675ea/?utm_source=share&utm_medium=web2x&context=3 
         # pending product signoff
     - question: Where can I find release notes for Windows App SDK?
       answer: |
          See [Stable channel release notes](https://docs.microsoft.com/windows/apps/windows-app-sdk/stable-channel), [Preview channel release notes](https://docs.microsoft.com/windows/apps/windows-app-sdk/preview-channel), and [Experimental channel release notes](https://docs.microsoft.com/windows/apps/windows-app-sdk/experimental-channel).
         # pending product signoff
     - question: Where can I find a public roadmap for Windows App SDK?
       answer: |
           - [Windows App SDK roadmap](https://portal.productboard.com/winappsdk/1-windows-app-sdk/tabs/2-planned)
           - [WinUI 3 roadmap](https://github.com/microsoft/microsoft-ui-xaml/blob/main/docs/roadmap.md#winui-3)
         # pending product signoff
     - question: Where can I find a roadmap for React Native Windows + Windows App SDK integration?
       answer: |
          See [the roadmap on Github](https://github.com/microsoft/react-native-windows/discussions/8906).
         # pending product signoff


additionalContent: |
  ## Related
  - [Windows Developer Glossary](windows-developer-glossary.md)
  - [Build your first Windows App](https://docs.microsoft.com/windows/apps/get-started/?tabs=cpp-win32#app-types)





